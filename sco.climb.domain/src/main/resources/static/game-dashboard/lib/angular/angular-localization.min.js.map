{"version":3,"sources":["angular-localization.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","isToken","str","length","TOKEN_REGEX","test","getPath","tok","path","split","result","slice","join","getKey","getBundle","i","bundles","loadBundle","token","root","url","basePath","currentLocale","_loading","fileExtension","get","success","data","key","hasOwnProperty","$broadcast","resourceUpdates","deferrences","resolve","error","err","reject","bundleReady","bundle","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","push","all","applySubstitutions","text","subs","res","firstOfKind","sub","replace","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","updateHtmlTagLangAttr","lang","$html","attr","setLocale","trim","isUndefined","defaultLocale","localeChanges","cookieStore","put","cookieName","getLocale","validTokens","RegExp","element","body","parent","persistSelection","has","navigator","userLanguage","language","getString","filter","locale","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","normAttr","observableAttrs","i18n","$on","elem","updateText","target","attributes","exp","values","$eval","langFiles","lastValues","$set","$normalize","i18nAttr","sharedDictionary","this"],"mappings":"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","file":"angular-localization.min.js","sourcesContent":["/*!\n * angular-localization :: v1.4.1 :: 2015-12-21\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2015 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\r\n    'use strict';\r\n\nangular.module('ngLocalize.Version', [])\r\n    .constant('localeVer', '1.4.1');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\r\n\nangular.module('ngLocalize.InstalledLanguages', [])\r\n    .value('localeSupported', [\r\n        'en-US'\r\n    ])\r\n    .value('localeFallbacks', {\r\n        'en': 'en-US'\r\n    });\nangular.module('ngLocalize')\n    .service('locale', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\n        var TOKEN_REGEX = localeConf.validTokens || new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$'),\n            $html = angular.element(document.body).parent(),\n            currentLocale,\n            deferrences,\n            bundles,\n            cookieStore;\n\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\n            cookieStore = $injector.get('$cookieStore');\n        }\n\n        function isToken(str) {\n            return (str && str.length && TOKEN_REGEX.test(str));\n        }\n\n        function getPath(tok) {\n            var path = tok ? tok.split('.') : '',\n                result = '';\n\n            if (path.length > 1) {\n                result = path.slice(0, -1).join('.');\n            }\n\n            return result;\n        }\n\n        function getKey(tok) {\n            var path = tok ? tok.split('.') : [],\n                result = '';\n\n            if (path.length) {\n                result = path[path.length - 1];\n            }\n\n            return result;\n        }\n\n        function getBundle(tok) {\n            var result = null,\n                path = tok ? tok.split('.') : [],\n                i;\n\n            if (path.length > 1) {\n                result = bundles;\n\n                for (i = 0; i < path.length - 1; i++) {\n                    if (result[path[i]]) {\n                        result = result[path[i]];\n                    } else {\n                        result = null;\n                        break;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        function loadBundle(token) {\n            var path = token ? token.split('.') : '',\n                root = bundles,\n                url = localeConf.basePath + '/' + currentLocale,\n                i;\n\n            if (path.length > 1) {\n                for (i = 0; i < path.length - 1; i++) {\n                    if (!root[path[i]]) {\n                        root[path[i]] = {};\n                    }\n                    root = root[path[i]];\n                    url += '/' + path[i];\n                }\n\n                if (!root._loading) {\n                    root._loading = true;\n\n                    url += localeConf.fileExtension;\n\n                    $http.get(url)\n                        .success(function (data) {\n                            var key,\n                                path = getPath(token);\n                            // Merge the contents of the obtained data into the stored bundle.\n                            for (key in data) {\n                                if (data.hasOwnProperty(key)) {\n                                    root[key] = data[key];\n                                }\n                            }\n\n                            // Mark the bundle as having been \"loaded\".\n                            delete root._loading;\n\n                            // Notify anyone who cares to know about this event.\n                            $rootScope.$broadcast(localeEvents.resourceUpdates);\n\n                            // If we issued a Promise for this file, resolve it now.\n                            if (deferrences[path]) {\n                                deferrences[path].resolve(path);\n                            }\n                        })\n                        .error(function (err) {\n                            var path = getPath(token);\n\n                            $log.error('[localizationService] Failed to load: ' + url);\n\n                            // We can try it again later.\n                            delete root._loading;\n\n                            // If we issued a Promise for this file, reject it now.\n                            if (deferrences[path]) {\n                                deferrences[path].reject(err);\n                            }\n                        });\n                }\n            }\n        }\n\n        function bundleReady(path) {\n            var bundle,\n                token;\n\n            path = path || localeConf.langFile;\n            token = path + '._LOOKUP_';\n\n            bundle = getBundle(token);\n\n            if (!deferrences[path]) {\n                deferrences[path] = $q.defer();\n            }\n\n            if (bundle && !bundle._loading) {\n                deferrences[path].resolve(path);\n            } else {\n                if (!bundle) {\n                    loadBundle(token);\n                }\n            }\n\n            return deferrences[path].promise;\n        }\n\n        function ready(path) {\n            var paths,\n                deferred,\n                outstanding;\n\n            if (angular.isString(path)) {\n                paths = path.split(',');\n            } else if (angular.isArray(path)) {\n                paths = path;\n            } else {\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\n            }\n\n            if (paths.length > 1) {\n                outstanding = [];\n                paths.forEach(function (path) {\n                    outstanding.push(bundleReady(path));\n                });\n                deferred = $q.all(outstanding);\n            } else {\n                deferred = bundleReady(path);\n            }\n\n            return deferred;\n        }\n\n        function applySubstitutions(text, subs) {\n            var res = text,\n                firstOfKind = 0;\n\n            if (subs) {\n                if (angular.isArray(subs)) {\n                    angular.forEach(subs, function (sub, i) {\n                        res = res.replace('%' + (i + 1), sub);\n                        res = res.replace('{' + (i + 1) + '}', sub);\n                    });\n                } else {\n                    angular.forEach(subs, function (v, k) {\n                        ++firstOfKind;\n\n                        res = res.replace('{' + k + '}', v);\n                        res = res.replace('%' + k, v);\n                        res = res.replace('%' + (firstOfKind), v);\n                        res = res.replace('{' + (firstOfKind) + '}', v);\n                    });\n                }\n            }\n            res = res.replace(/\\n/g, '<br>');\n\n            return res;\n        }\n\n        function getLocalizedString(txt, subs) {\n            var result = '',\n                bundle,\n                key,\n                A,\n                isValidToken = false;\n\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\n                A = txt.split(localeConf.delimiter);\n                txt = A[0];\n                subs = angular.fromJson(A[1]);\n            }\n\n            isValidToken = isToken(txt);\n            if (isValidToken) {\n                if (!angular.isObject(subs)) {\n                    subs = [subs];\n                }\n\n                bundle = getBundle(txt);\n                if (bundle && !bundle._loading) {\n                    key = getKey(txt);\n\n                    if (bundle[key]) {\n                        result = applySubstitutions(bundle[key], subs);\n                    } else {\n                        $log.info('[localizationService] Key not found: ' + txt);\n                        result = '%%KEY_NOT_FOUND%%';\n                    }\n                } else {\n                    if (!bundle) {\n                        loadBundle(txt);\n                    }\n                }\n            } else {\n                result = txt;\n            }\n\n            return result;\n        }\n\n        function updateHtmlTagLangAttr(lang) {\n            lang = lang.split('-')[0];\n\n            $html.attr('lang', lang);\n        }\n\n        function setLocale(value) {\n            var lang;\n\n            if (angular.isString(value)) {\n                value = value.trim();\n                if (localeSupported.indexOf(value) !== -1) {\n                    lang = value;\n                } else {\n                    lang = localeFallbacks[value.split('-')[0]];\n                    if (angular.isUndefined(lang)) {\n                        lang = localeConf.defaultLocale;\n                    }\n                }\n            } else {\n                lang = localeConf.defaultLocale;\n            }\n\n            if (lang !== currentLocale) {\n                bundles = {};\n                deferrences = {};\n                currentLocale = lang;\n\n                updateHtmlTagLangAttr(lang);\n\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\n                $rootScope.$broadcast(localeEvents.resourceUpdates);\n\n                if (cookieStore) {\n                    cookieStore.put(localeConf.cookieName, lang);\n                }\n            }\n        }\n\n        function getLocale() {\n            return currentLocale;\n        }\n\n        setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ? cookieStore.get(localeConf.cookieName) : $window.navigator.userLanguage || $window.navigator.language);\n\n        return {\n            ready: ready,\n            isToken: isToken,\n            getPath: getPath,\n            getKey: getKey,\n            setLocale: setLocale,\n            getLocale: getLocale,\n            getString: getLocalizedString\n        };\n    });\n\nangular.module('ngLocalize')\r\n    .filter('i18n', function (locale) {\r\n        var i18nFilter = function (input, args) {\r\n            return locale.getString(input, args);\r\n        };\r\n\r\n        i18nFilter.$stateful = true;\r\n\r\n        return i18nFilter;\r\n    });\r\n\nangular.module('ngLocalize.Events', [])\r\n    .constant('localeEvents', {\r\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\r\n        localeChanges: 'ngLocalizeLocaleChanged'\r\n    });\nangular.module('ngLocalize')\r\n    .directive('i18n', function ($sce, locale, localeEvents, localeConf) {\r\n        function setText(elm, tag) {\r\n            if (tag !== elm.html()) {\r\n                elm.html($sce.getTrustedHtml(tag));\r\n            }\r\n        }\r\n\r\n        function update(elm, string, optArgs) {\r\n            if (locale.isToken(string)) {\r\n                locale.ready(locale.getPath(string)).then(function () {\r\n                    setText(elm, locale.getString(string, optArgs));\r\n                });\r\n            } else {\r\n                setText(elm, string);\r\n            }\r\n        }\r\n\r\n        return function (scope, elm, attrs) {\r\n            var hasObservers;\r\n\r\n            attrs.$observe('i18n', function (newVal, oldVal) {\r\n                if (newVal && newVal !== oldVal) {\r\n                    update(elm, newVal, hasObservers); \r\n                }\r\n            });\r\n\r\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\r\n                if (localeConf.observableAttrs.test(attr)) {\r\n                    attrs.$observe(normAttr, function (newVal) {\r\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\r\n                            hasObservers = hasObservers || {};\r\n                            hasObservers[normAttr] = attrs[normAttr];\r\n                            update(elm, attrs.i18n, hasObservers);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n        };\r\n    })\r\n    .directive('i18nAttr', function (locale, localeEvents) {\r\n        return function (scope, elem, attrs) {\r\n            var lastValues = {};\r\n\r\n            function updateText(target, attributes) {\r\n                var values = scope.$eval(attributes),\r\n                    langFiles = [],\r\n                    exp;\r\n\r\n                for(var key in values) {\r\n                    exp = values[key];\r\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\r\n                        langFiles.push(locale.getPath(exp));\r\n                    }\r\n                }\r\n\r\n                locale.ready(langFiles).then(function () {\r\n                    var value = '';\r\n\r\n                    for(var key in values) {\r\n                        exp = values[key];\r\n                        value = locale.getString(exp);\r\n                        if (lastValues[key] !== value) {\r\n                            attrs.$set(attrs.$normalize(key), lastValues[key] = value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            attrs.$observe('i18nAttr', function (newVal) {\r\n                if (newVal) {\r\n                    updateText(elem, newVal); \r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                updateText(elem, attrs.i18nAttr);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                updateText(elem, attrs.i18nAttr);\r\n            });\r\n        };\r\n    });\r\n\nangular.module('ngLocalize.Config', [])\n    .value('localeConf', {\n        basePath: 'languages',\n        defaultLocale: 'en-US',\n        sharedDictionary: 'common',\n        fileExtension: '.lang.json',\n        persistSelection: true,\n        cookieName: 'COOKIE_LOCALE_LANG',\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\n        delimiter: '::',\n        validTokens: new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$')\n    });\n\n}(this.angular, this, this.document));\r\n"],"sourceRoot":"/source/"}